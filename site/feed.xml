<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Seichy's Missing Bit</title>
		<description>A blog on programing, dreams, pandas and sweet food.</description>
		<link>http://martianwabbit.com</link>
		<atom:link href="http://martianwabbit.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Connecting To A Remote RethinkDB Admin Interface</title>
				<description>&lt;p&gt;
	So here&#39;s a really quick tip, when you run a RethinkDB instance on a remote server you cannot access the admin interface, by default, from the outside of the server. The easiest way to get around this without allowing anyone to access it is to use a ssh tunnel like this:
&lt;/p&gt;

&lt;pre&gt;
	&lt;code&gt;
ssh -L 8080:localhost:8080 &amp;lt;host&amp;gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
	This basically uses ssh to map the port 8080 of your machine (127.0.0.1 or localhost) to the port 8080 on the host machine. Don&#39;t forget to replace &quot;&amp;lt;host&amp;gt;&quot; with your actual remote host.
&lt;/p&gt;

&lt;p&gt;
	With this, you can now connect to the admin interface by going to localhost:8080 on your machine. Note that this will only work as long as the ssh connection remains open.
&lt;/p&gt;

&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;p&gt;
	&lt;a href=&quot;http://www.symantec.com/connect/articles/ssh-port-forwarding&quot;&gt;SSH Port Forwarding - Symatec&lt;/a&gt; &lt;br&gt;
	&lt;a href=&quot;https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding&quot;&gt;SSH/OpenSSH/PortForwarding - Ubuntu Community Documentation&lt;/a&gt;
&lt;/p&gt;</description>
				<pubDate>Sat, 20 Jul 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/07/20/connecting-to-a-remote-rethinkdb-admin-interface.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/07/20/connecting-to-a-remote-rethinkdb-admin-interface.html</guid>
			</item>
		
			<item>
				<title>A Javascript Array of Countries</title>
				<description>&lt;p&gt;Here&amp;#8217;s the Array:&lt;/p&gt;
&lt;code&gt;
	&lt;pre&gt;
var countries = [&quot;Afghanistan&quot;, &quot;Åland Islands&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;American Samoa&quot;, &quot;Andorra&quot;, &quot;Angola&quot;, &quot;Anguilla&quot;, &quot;Antarctica&quot;, &quot;Antigua And Barbuda&quot;, &quot;Argentina&quot;, &quot;Armenia&quot;, &quot;Aruba&quot;, &quot;Australia&quot;, &quot;Austria&quot;, &quot;Azerbaijan&quot;, &quot;Bahamas&quot;, &quot;Bahrain&quot;, &quot;Bangladesh&quot;, &quot;Barbados&quot;, &quot;Belarus&quot;, &quot;Belgium&quot;, &quot;Belize&quot;, &quot;Benin&quot;, &quot;Bermuda&quot;, &quot;Bhutan&quot;, &quot;Bolivia, Plurinational State Of&quot;, &quot;Bonaire, Sint Eustatius And Saba&quot;, &quot;Bosnia And Herzegovina&quot;, &quot;Botswana&quot;, &quot;Bouvet Island&quot;, &quot;Brazil&quot;, &quot;British Indian Ocean Territory&quot;, &quot;Brunei Darussalam&quot;, &quot;Bulgaria&quot;, &quot;Burkina Faso&quot;, &quot;Burundi&quot;, &quot;Cambodia&quot;, &quot;Cameroon&quot;, &quot;Canada&quot;, &quot;Cape Verde&quot;, &quot;Cayman Islands&quot;, &quot;Central African Republic&quot;, &quot;Chad&quot;, &quot;Chile&quot;, &quot;China&quot;, &quot;Christmas Island&quot;, &quot;Cocos (keeling) Islands&quot;, &quot;Colombia&quot;, &quot;Comoros&quot;, &quot;Congo&quot;, &quot;Congo, The Democratic Republic Of The&quot;, &quot;Cook Islands&quot;, &quot;Costa Rica&quot;, &quot;Côte D&#39;ivoire&quot;, &quot;Croatia&quot;, &quot;Cuba&quot;, &quot;Curaçao&quot;, &quot;Cyprus&quot;, &quot;Czech Republic&quot;, &quot;Denmark&quot;, &quot;Djibouti&quot;, &quot;Dominica&quot;, &quot;Dominican Republic&quot;, &quot;Ecuador&quot;, &quot;Egypt&quot;, &quot;El Salvador&quot;, &quot;Equatorial Guinea&quot;, &quot;Eritrea&quot;, &quot;Estonia&quot;, &quot;Ethiopia&quot;, &quot;Falkland Islands (malvinas)&quot;, &quot;Faroe Islands&quot;, &quot;Fiji&quot;, &quot;Finland&quot;, &quot;France&quot;, &quot;French Guiana&quot;, &quot;French Polynesia&quot;, &quot;French Southern Territories&quot;, &quot;Gabon&quot;, &quot;Gambia&quot;, &quot;Georgia&quot;, &quot;Germany&quot;, &quot;Ghana&quot;, &quot;Gibraltar&quot;, &quot;Greece&quot;, &quot;Greenland&quot;, &quot;Grenada&quot;, &quot;Guadeloupe&quot;, &quot;Guam&quot;, &quot;Guatemala&quot;, &quot;Guernsey&quot;, &quot;Guinea&quot;, &quot;Guinea-bissau&quot;, &quot;Guyana&quot;, &quot;Haiti&quot;, &quot;Heard Island And Mcdonald Islands&quot;, &quot;Holy See (vatican City State)&quot;, &quot;Honduras&quot;, &quot;Hong Kong&quot;, &quot;Hungary&quot;, &quot;Iceland&quot;, &quot;India&quot;, &quot;Indonesia&quot;, &quot;Iran, Islamic Republic Of&quot;, &quot;Iraq&quot;, &quot;Ireland&quot;, &quot;Isle Of Man&quot;, &quot;Israel&quot;, &quot;Italy&quot;, &quot;Jamaica&quot;, &quot;Japan&quot;, &quot;Jersey&quot;, &quot;Jordan&quot;, &quot;Kazakhstan&quot;, &quot;Kenya&quot;, &quot;Kiribati&quot;, &quot;Korea, Democratic People&#39;s Republic Of&quot;, &quot;Korea, Republic Of&quot;, &quot;Kuwait&quot;, &quot;Kyrgyzstan&quot;, &quot;Lao People&#39;s Democratic Republic&quot;, &quot;Latvia&quot;, &quot;Lebanon&quot;, &quot;Lesotho&quot;, &quot;Liberia&quot;, &quot;Libya&quot;, &quot;Liechtenstein&quot;, &quot;Lithuania&quot;, &quot;Luxembourg&quot;, &quot;Macao&quot;, &quot;Macedonia, The Former Yugoslav Republic Of&quot;, &quot;Madagascar&quot;, &quot;Malawi&quot;, &quot;Malaysia&quot;, &quot;Maldives&quot;, &quot;Mali&quot;, &quot;Malta&quot;, &quot;Marshall Islands&quot;, &quot;Martinique&quot;, &quot;Mauritania&quot;, &quot;Mauritius&quot;, &quot;Mayotte&quot;, &quot;Mexico&quot;, &quot;Micronesia, Federated States Of&quot;, &quot;Moldova, Republic Of&quot;, &quot;Monaco&quot;, &quot;Mongolia&quot;, &quot;Montenegro&quot;, &quot;Montserrat&quot;, &quot;Morocco&quot;, &quot;Mozambique&quot;, &quot;Myanmar&quot;, &quot;Namibia&quot;, &quot;Nauru&quot;, &quot;Nepal&quot;, &quot;Netherlands&quot;, &quot;New Caledonia&quot;, &quot;New Zealand&quot;, &quot;Nicaragua&quot;, &quot;Niger&quot;, &quot;Nigeria&quot;, &quot;Niue&quot;, &quot;Norfolk Island&quot;, &quot;Northern Mariana Islands&quot;, &quot;Norway&quot;, &quot;Oman&quot;, &quot;Pakistan&quot;, &quot;Palau&quot;, &quot;Palestine, State Of&quot;, &quot;Panama&quot;, &quot;Papua New Guinea&quot;, &quot;Paraguay&quot;, &quot;Peru&quot;, &quot;Philippines&quot;, &quot;Pitcairn&quot;, &quot;Poland&quot;, &quot;Portugal&quot;, &quot;Puerto Rico&quot;, &quot;Qatar&quot;, &quot;Réunion&quot;, &quot;Romania&quot;, &quot;Russian Federation&quot;, &quot;Rwanda&quot;, &quot;Saint Barthélemy&quot;, &quot;Saint Helena, Ascension And Tristan Da Cunha&quot;, &quot;Saint Kitts And Nevis&quot;, &quot;Saint Lucia&quot;, &quot;Saint Martin (french Part)&quot;, &quot;Saint Pierre And Miquelon&quot;, &quot;Saint Vincent And The Grenadines&quot;, &quot;Samoa&quot;, &quot;San Marino&quot;, &quot;Sao Tome And Principe&quot;, &quot;Saudi Arabia&quot;, &quot;Senegal&quot;, &quot;Serbia&quot;, &quot;Seychelles&quot;, &quot;Sierra Leone&quot;, &quot;Singapore&quot;, &quot;Sint Maarten (dutch Part)&quot;, &quot;Slovakia&quot;, &quot;Slovenia&quot;, &quot;Solomon Islands&quot;, &quot;Somalia&quot;, &quot;South Africa&quot;, &quot;South Georgia And The South Sandwich Islands&quot;, &quot;South Sudan&quot;, &quot;Spain&quot;, &quot;Sri Lanka&quot;, &quot;Sudan&quot;, &quot;Suriname&quot;, &quot;Svalbard And Jan Mayen&quot;, &quot;Swaziland&quot;, &quot;Sweden&quot;, &quot;Switzerland&quot;, &quot;Syrian Arab Republic&quot;, &quot;Taiwan, Province Of China&quot;, &quot;Tajikistan&quot;, &quot;Tanzania, United Republic Of&quot;, &quot;Thailand&quot;, &quot;Timor-leste&quot;, &quot;Togo&quot;, &quot;Tokelau&quot;, &quot;Tonga&quot;, &quot;Trinidad And Tobago&quot;, &quot;Tunisia&quot;, &quot;Turkey&quot;, &quot;Turkmenistan&quot;, &quot;Turks And Caicos Islands&quot;, &quot;Tuvalu&quot;, &quot;Uganda&quot;, &quot;Ukraine&quot;, &quot;United Arab Emirates&quot;, &quot;United Kingdom&quot;, &quot;United States&quot;, &quot;United States Minor Outlying Islands&quot;, &quot;Uruguay&quot;, &quot;Uzbekistan&quot;, &quot;Vanuatu&quot;, &quot;Venezuela, Bolivarian Republic Of&quot;, &quot;Viet Nam&quot;, &quot;Virgin Islands, British&quot;, &quot;Virgin Islands, U.s.&quot;, &quot;Wallis And Futuna&quot;, &quot;Western Sahara&quot;, &quot;Yemen&quot;, &quot;Zambia&quot;, &quot;Zimbabwe&quot;];
	&lt;/pre&gt;
&lt;/code&gt;
&lt;p&gt;It follows the ISO 3166-1-alpha-2 standard. You don&amp;#8217;t need an array with countries everyday but, when you do, getting it is a pain. I am putting it here so my future self doesn&amp;#8217;t have to look for it again.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s how I got the list:&lt;/p&gt;
&lt;code&gt;
	&lt;pre&gt;
$ = jQuery;
String.prototype.capitalize = function() {
    return this.replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); });
};

var countries = &quot;var countries = [&quot;;

$(&#39;tbody&#39;).find(&quot;tr&quot;).each(function(i) {
    var country = $(this).find(&#39;td&#39;).last().text();
    country = country.toLowerCase().capitalize();
    if (i === 0) {
        countries = countries + &quot;\&quot;&quot; + country + &quot;\&quot;&quot;;
    } else {
        countries = countries + &quot;, &quot; + &quot;\&quot;&quot; + country + &quot;\&quot;&quot;;
    }
});

countries = countries + &quot;];&quot;;
console.log(countries);
	&lt;/pre&gt;
&lt;/code&gt;
&lt;p&gt;If you run that script in &lt;a href=&#39;http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm&#39;&gt;here&lt;/a&gt;, you&amp;#8217;ll get a nice string printed on the console which you can copy and paste and use as an array. Quick 5-minute hack FTW.&lt;/p&gt;</description>
				<pubDate>Fri, 28 Jun 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/06/28/a-javascript-array-of-countries.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/06/28/a-javascript-array-of-countries.html</guid>
			</item>
		
			<item>
				<title>On Storytelling and Video Games</title>
				<description>&lt;p&gt;I think we live in a very exciting time. We have so many incredible things to communicate and so many mediums to do so. I&amp;#8217;ve always been a daydreamer. I remember my third grade teacher using me in an example when he introduced the word. It always stuck with me, I am pretty introverted sometimes and, allowing myself to live in a different superposed world has always kept me sane.&lt;/p&gt;

&lt;p&gt;All these years I&amp;#8217;ve been developing a world in my head, all the fine details, all the characters that inhabit such a world and every single one of their motivations and dreams have been slowly built and polish as my life goes on. I&amp;#8217;ve thought of writing a book for years. Not because I want to be a writer, I&amp;#8217;ll always be a programmer, but because I want to capture this world. I don&amp;#8217;t want to lose it and I want others who know me and have heard all my stories to understand how deep this rabbit hole is.&lt;/p&gt;

&lt;p&gt;The problem is, I am not a writer (and as I said before, I don&amp;#8217;t want to be one) so, writing a book is pretty daunting. Luckily there are many other mediums available to me, even though I love all sort of media, my favorite one, and the one that incorporates every other media I like is video games. I&amp;#8217;ve always wanted to become an indie game developer. So far I haven&amp;#8217;t been successful mostly because I let other parts of my life get in the way. I plan to change that though.&lt;/p&gt;

&lt;p&gt;I want to use video games as a canvas on which I tell my stories. I think it&amp;#8217;s probably the only way for them to be as immersing for everyone as they&amp;#8217;ve been for me. From now on, I&amp;#8217;ll start working on games that tell all of my daydreams. I&amp;#8217;ve already started on the first one, the genre will be a huge mash-up of elements I like and will hopefully get my message through. Video games are truly the means to greater expression right now and I want to fully embrace that.&lt;/p&gt;</description>
				<pubDate>Tue, 05 Mar 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/03/05/On-Storytelling-and-games.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/03/05/On-Storytelling-and-games.html</guid>
			</item>
		
			<item>
				<title>Migrating from Tumblr to Jekyll</title>
				<description>&lt;p&gt;A couple of months ago I moved my blog from Tumblr over to Jekyll and started hosting it with Webfaction. It&amp;#8217;s been great so far but, I never quite figured out how to get rid of my old url redirecting everything to it&amp;#8217;s new page on the new blog.&lt;/p&gt;

&lt;p&gt;I originally thought I&amp;#8217;d have to write a redirect rule for each of the posts I kept on the new blog and then make the subdomain redirect to to the domain. Needless to say that it felt so annoying that I ended up not doing anything at all. Until now, that is. So here is how I fixed stuff! First of all, since I imported my Tumblr posts using the importer that comes with Jekyll, I had urls that looked like this:&lt;/p&gt;
&lt;code&gt;
	http://martianwabbit.com/2011/04/04/4344642365.html
&lt;/code&gt;
&lt;p&gt;I didn&amp;#8217;t really change them, I thought that they having their old ID would be handy when I wanted to make the shift completely. This ended up being a good decision at the end.&lt;/p&gt;

&lt;p&gt;So now, the only thing I needed to do was to redirect this:&lt;/p&gt;
&lt;code&gt;
http://blog.martianwabbit.com/post/4344642365/justvector-social-icons-font
&lt;/code&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;code&gt;
http://martianwabbit.com/2011/04/04/4344642365.html
&lt;/code&gt;
&lt;p&gt;Which isn&amp;#8217;t as straight-forward since, I have no way of knowing what the date might be, so I changed the permalink for imported posts to this:&lt;/p&gt;
&lt;code&gt;
&lt;pre&gt;
---
layout: post
title: &quot;JustVector Social Icons Font&quot;
permalink: /post/4344642365.html
---
&lt;/pre&gt;
&lt;/code&gt;
&lt;p&gt;So I could just do a simple URL redirect. Now, all I needed to do was setup apache so it&amp;#8217;d redirect the URLs as intended, that was probably the easiest part, a quick regex later I ended up with this:&lt;/p&gt;
&lt;code&gt;
&lt;pre&gt;
RedirectMatch \/post\/([0-9]+)\/.* /post/$1.html
&lt;/pre&gt;
&lt;/code&gt;
&lt;p&gt;Which worked exactly as intended, now all I have to do, is wait for the DNS to finish propagating.&lt;/p&gt;</description>
				<pubDate>Sun, 24 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/24/migrating-from-tumblr-to-jekyll.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/24/migrating-from-tumblr-to-jekyll.html</guid>
			</item>
		
			<item>
				<title>Design For Your Mother</title>
				<description>&lt;p&gt;I am not really that much of a designer. I&amp;#8217;ve worked as one but, I&amp;#8217;d never describe me as a &amp;#8220;web designer&amp;#8221;. I am simply not that good with designing things. I do have good taste though and, can tell good design apart from bad design. I also have a solid knowledge of design and UX in general which is enough for my day to day activities. At the end of the day, the only thing I know about design, is that good design should be easy to use. How easy? Well, my mother should be able to use it without having to ask for my help. I obviously know that not all mothers need help when it comes to computers (to be honest, mine can handle herself just fine without me) but, the point is, your design should be easy to use first, and nice-looking second. My mother should be able to use your application without having to think too hard. Users are lazy and they like being able to do stuff without thinking. Try as hard as possible to make it easy for them to not think.&lt;/p&gt;

&lt;p&gt;I really like how simple interfaces are kind of trending these days. It really is great, simple design helps get the message through and allows users to interact more freely with the web. I&amp;#8217;ve always gone with &amp;#8220;minimalist&amp;#8221; designs mostly because, it&amp;#8217;s easier to get right when you are not that great of a designer and also because it&amp;#8217;s easier for the user to interact with any application if they are only presented what they need at any given moment.&lt;/p&gt;

&lt;p&gt;Are you sure you need that extra button? Would anyone apart from power users benefit from having this on the interface? Will this get the message through? Can we hide all of this complexity so they can find it if they need it but wont get in the way if they don&amp;#8217;t?&lt;/p&gt;

&lt;p&gt;Think about, simple design is awesome, &lt;a href=&#39;http://www.sensible.com/dmmt.html&#39;&gt;don&amp;#8217;t make me think&lt;/a&gt; and don&amp;#8217;t make my mother ask me for help.&lt;/p&gt;</description>
				<pubDate>Wed, 20 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/20/Design-for-your-mother.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/20/Design-for-your-mother.html</guid>
			</item>
		
			<item>
				<title>On the Importance of Vanilla Javascript</title>
				<description>&lt;p&gt;There&amp;#8217;s a very simple reason why people don&amp;#8217;t see the need to learn &amp;#8220;vanilla&amp;#8221; Javascript. Boilerplate code. When you are trying to create something simple and straight-forward Javascript loves getting in the way. Well, Javascript doesn&amp;#8217;t actually like getting in the way, browsers do. This gets worse when you are trying to support different browser versions. So you have to write things using the current APIs available to you and then, add a whole abstraction layer just so you can fall-back to a workable solution that might be needed to support a particular browser version which happens to be pretty old but a bunch of your users still use.&lt;/p&gt;

&lt;p&gt;So, there&amp;#8217;s two ways to look at this, either you go with the approach that will support the most users and let the other&amp;#8217;s suffer (or degrade gracefully, ideally). Or write a bunch of boilerplate code to support browsers. Luckily, the second option is actually viable. There&amp;#8217;s a plethora of libraries other people have taken the time to write for you. These are great. They are well tested, cross-browser and are really easy to use.&lt;/p&gt;

&lt;p&gt;The problem is that sometimes you have to add 9595 lines of codes just to do something as simple as &lt;code&gt;$(&quot;code&quot;).addClass(&quot;prettyPrint&quot;); &lt;/code&gt;. This is were a bunch of people will appear out of nowhere and tell you to do it manually with &amp;#8220;vanilla&amp;#8221; Javascript. I am not against vanilla Javascript. I actually like writing stuff in Javascript without the aid of libraries but, this is mostly unreasonable. For example, adding the class takes jQuery 38 lines. Now, you might say something along the lines that jQuery is an extreme example but, I am sure that everything that can be taken out was already taken out. So, you might just go with jQuery and call it the day, after all going the vanilla way is only feasible when you know your audience and want to tailor directly to them or when you are strict on who you support and are pro graceful degradation. Of course, if you have a time constraint it becomes even more one sided.&lt;/p&gt;

&lt;p&gt;I personally think that soon enough, we won&amp;#8217;t need jQuery to do as much for us, with new browser APIs it gets increasingly easier to get things done with less. Things like querySelectors and CSS3 animations can go a long way when building a modern site. But, as long as we have money to be made and time to be saved and many browsers to be supported, going vanilla might not be a good option in most cases.&lt;/p&gt;</description>
				<pubDate>Wed, 13 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/13/On-the-Importance-of-Vanilla-Javascript.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/13/On-the-Importance-of-Vanilla-Javascript.html</guid>
			</item>
		
			<item>
				<title>Organizing a Javascript MVC Project</title>
				<description>&lt;p&gt; 
I&#39;ve been doing a lot of javascript development lately. My work as a frontend developer for Laureate has forced me to seriously how we organize the frontend code so it&#39;s easy to work with and hard for us to make mistakes.
&lt;/p&gt;&lt;p&gt;
As it stands, I developed the frontend structure of the project (I am not sure if I am allowed to share it) we are currently building. We use &lt;a href=&#39;http://www.canjs.us&#39;&gt;can.js&lt;/a&gt; as our MVC framework of choice and use &lt;a href=&#39;http://www.gruntjs.com/&#39;&gt;grunt&lt;/a&gt; to stick all the files together and check them for errors. All this, in the effort to be as agile as possible.
&lt;/p&gt;&lt;p&gt;
Coming up with a structure was pretty hard but, I think out current structure works pretty well. Our folder structure looks somewhat like this:
&lt;/p&gt;&lt;pre&gt;
    -Project
        -Application
            -Assets
                -Images
                -Css
            -Javascript
                -Models
                -Views
                -Controllers
                -libs
                    -Plugins
                    jQuery.js
                app.js
        -dist
            -app.min.js
            -libs.min.js
        index.html
        grunt.js
&lt;/pre&gt;&lt;p&gt;
It might look complicated, but it&#39;s actually fairly simple. I&#39;ll try to break it down, show how we use grunt to generate &lt;code&gt;app.min.js&lt;/code&gt; and &lt;code&gt;libs.min.js&lt;/code&gt; and how they all generally fit in together.
&lt;/p&gt;&lt;h2&gt;Folder &amp;amp; File Structure&lt;/h2&gt;&lt;p&gt;
The folder structure is fairly straight forward. Inside the &lt;code&gt;Application&lt;/code&gt; folder we hold all of our important files. The only important folder here is the one called &lt;code&gt;Javascript&lt;/code&gt;, this is where we store all of our Models, Views and Controllers which at the end, make up our entire application. You can have more folders inside of these and grunt can still fetch all of their contents to build up the final files.
&lt;/p&gt;&lt;p&gt;
Here&#39;s what a raw controller inside this folder looks like:
&lt;/p&gt;&lt;code&gt;
&lt;pre&gt;
;(function(namespace, undefined) {
  &#39;use strict&#39;;
  var ControllerName = can.Control({
    &#39;init&#39;: function(element, options) {
      var self = this;
      // Actual code stuff
    }
  });

  namespace.Controllers = namespace.Controllers || {};
  namespace.Controllers.ControllerName = ControllerName;
}(this));
&lt;/pre&gt;
&lt;/code&gt;&lt;p&gt;
As you can see the only thing we are doing which isn&#39;t immediately obvious is to add the controller to the namespace&#39;s Controller object. In our case, this is the window object. This is great because we don&#39;t populate the global namespace with every single controller and because we can access any controller like this: &lt;code&gt;Controllers.ControllerName&lt;/code&gt;. We do the same for models:
&lt;/p&gt;&lt;code&gt;
&lt;pre&gt;
;(function(namespace, undefined) {
  &#39;use strict&#39;;
  var ModelName = can.Model({
    findOne: &#39;GET /getModel&#39;
  }, {});

  namespace.Models = namespace.Models || {};
  namespace.Models.ModelName = ModelName;
}(this));
&lt;/pre&gt;
&lt;/code&gt;&lt;p&gt;
In our case, views are simple .ejs files so there&#39;s nothing special about how we define them, although you could compile them to javascript and tell grunt to minimize it along with the whole code which would probably faster to load in the long run.
&lt;/p&gt;&lt;p&gt;
Now that we have our files in place, let&#39;s move into using grunt to generate the finalized application files will be using in production.
&lt;/p&gt;&lt;h2&gt;Grunt&lt;/h2&gt;&lt;p&gt;Here&#39;s what an example grunt file would look like:&lt;/p&gt;&lt;code&gt;
&lt;pre&gt;
module.exports = function(grunt) {
  grunt.initConfig({
    concat: {
      app: {
        src: [
          &#39;Application/Assets/Javascript/controllers/**/*.js&#39;, 
          &#39;Application/Assets/Javascript/models/**/*.js&#39;, 
          &#39;Application/Assets/Javascript/app.js&#39;
        ],
        dest: &#39;dist/app.js&#39;
      },
      libs: {
        src: [
          &#39;Application/Assets/Javascript/libs/jQuery.js&#39;, 
          &#39;Application/Assets/Javascript/libs/plugins/**/*.js&#39;
        ],
        dest: &#39;dist/libs.js&#39;
      }
    },
    min: {
      app: {
        src: [&#39;&amp;lt;config:concat.app.dest&amp;gt;&#39;],
        dest: &#39;dist/app.min.js&#39;
      },
      libs: {
        src: [&#39;&amp;lt;config:concat.libs.dest&amp;gt;&#39;],
        dest: &#39;dist/libs.min.js&#39;
      }
    }
  });

  grunt.registerTask(&#39;default&#39;, &#39;concat min&#39;);
};
&lt;/pre&gt;
&lt;/code&gt;&lt;p&gt;This particular grunt file doesn&#39;t do much. When you call the &lt;code&gt;grunt&lt;/code&gt; command it&#39;ll concatenate all of the files in the javascript folder (except for the views) and all of the libraries into two files, libs.js and app.js (and their minimized equivalents). These can be included directly into the html to have the final application files.&lt;/p&gt;&lt;h2&gt;That&#39;s it&lt;/h2&gt;&lt;p&gt;I hope this is somewhat useful to someone, it actually took me a while to find something I was comfortable with so try experimenting with variations and let me know about it. This is how I currently do things but, I am sure there are places where I can improve the design. This mostly revolves around keeping the global namespace as clean as possible and making files that can be easily concatenated to save space when you have to finalized copy which, I think are generally good goals.&lt;/p&gt;</description>
				<pubDate>Fri, 01 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/01/organizing-a-javascript-mvc-project.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/01/organizing-a-javascript-mvc-project.html</guid>
			</item>
		
			<item>
				<title>Surviving a Hackathon</title>
				<description>&lt;p&gt;Last week I finally went to &lt;a href=&#39;http://vdhackathon.org&#39;&gt;my first hackathon&lt;/a&gt; and it was an awesome experience! Here are a couple of things everyone should watch out for when they go to a hackathon for the first time.&lt;/p&gt;

&lt;h2 id=&#39;what_youll_need&#39;&gt;What you&amp;#8217;ll need&lt;/h2&gt;

&lt;p&gt;Okay, first things first, hackathons are apparently seriously social events. If you are more of an introvert it might be good for a you to bring along a friend, it&amp;#8217;ll make your time there easier. I brought a friend along and it made the whole thing a lot more fun.&lt;/p&gt;

&lt;p&gt;There are other things which are kind of pretty obvious stuff such as: a laptop if you are going to be doing some coding and headphones if you need to block the world to get things done (Although, like I said, these are social events so try not to get too lost in your code and enjoy the company). Cameras are also great, your phone will probably do if you don&amp;#8217;t feel like carrying additional stuff.&lt;/p&gt;

&lt;p&gt;Finally, another thing, which I didn&amp;#8217;t actually bring with me on purpose are business cards. Even though I was just hanging around and doing stuff a bunch of people approached me with project ideas and business offers. So if you are looking for a job that might also be a good place to look for one. I almost ran out of them during the weekend!&lt;/p&gt;

&lt;h2 id=&#39;hackathoning&#39;&gt;Hackathoning!&lt;/h2&gt;

&lt;p&gt;Hackathoning is the only reason you are awake at 9am on a Saturday so it&amp;#8217;s important to keep it in mind. If there&amp;#8217;s a theme which was set beforehand, I&amp;#8217;d recommend you go ahead and think of ideas so you can discuss them with your teammates. If there&amp;#8217;s no theme then thinking of ideas is still a good idea.&lt;/p&gt;

&lt;p&gt;The first thing you&amp;#8217;ll need to do if find a team, if you wanna work on your own (which I don&amp;#8217;t think is a good idea) or brought along your own team, you are done with this and can go ahead and start brainstorming. If you didn&amp;#8217;t and have to find a team look for people who can complement your skill-set. Let them know the kind of thing you wanna work on and what you can do or want to do.&lt;/p&gt;

&lt;p&gt;Once you are in a team, you are ready to make a plan. Make sure the plan is feasible, you only have a limited amount of time after all so, if it&amp;#8217;s too complicated you might have enough time to finish, you can always continue working on the project after the hackathon so, keep it achievable.&lt;/p&gt;

&lt;p&gt;At this point, you are ready to start coding! So go out there and code! Try not to get too distracted or too focused, try to socialize and get stuff done at the same time. If you can balance these things you&amp;#8217;ll survive this hackathon successfully.&lt;/p&gt;

&lt;h3 id=&#39;networking&#39;&gt;Networking&lt;/h3&gt;

&lt;p&gt;This is, what I found to be, the most important aspect of the hackathon. You cannot only socialize but, you can also make new friends, business partners, clients and jobs. So try to talk with everyone, it&amp;#8217;s always nice to find new project to work on.&lt;/p&gt;

&lt;h2 id=&#39;closing_up&#39;&gt;Closing up&lt;/h2&gt;

&lt;p&gt;Hackathoning is fun! You can network, socialize, code and have a general good weekend so, if you haven&amp;#8217;t gone to one, I highly recommend you do.&lt;/p&gt;</description>
				<pubDate>Sun, 27 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/01/27/surviving-a-hackathon.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/01/27/surviving-a-hackathon.html</guid>
			</item>
		
			<item>
				<title>Rails Quickhint #1: Creating a model while skipping validations</title>
				<description>&lt;p&gt;
	This certainly needs some background. I&#39;ve been working on a random rails project for the better part of the last couple of months. 
	This project uses devise to manage logins and user registration. Recently registrations started failing in the site which, didn&#39;t 
	make sense since they had been working fine for a while. So I started digging into it.
&lt;/p&gt;

&lt;p&gt;
	According to rails the user url didn&#39;t exist so it couldn&#39;t redirect back to the homepage after a successful registration. 
	After much digging around the stack trace I finally figured it out. Turns out that when a devise user is create a user profile is created along with it(this is specific to my application). But, that&#39;s normal, what started causing problems was that the profile had a validation for a unique username, which blank, wasn&#39;t (since the username is only supposed to be set after registration).
&lt;/p&gt;

&lt;p&gt;
	So, what&#39;s the solution? Easy, all I had to make sure of was that when I created the user profile I disabled validations for the user profile model. Here&#39;s how I did it:
&lt;/p&gt;

&lt;p&gt;user.rb&lt;/p&gt;
&lt;code&gt;
&lt;pre&gt;
class User &lt; ActiveRecord::Base
  after_create :create_profile
  has_one :user_profile, :dependent =&gt; :destroy
  
  def create_profile
    self.build_user_profile
    self.user_profile.save(:validate =&gt; false)
  end
end
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;user_profile.rb&lt;/p&gt;
&lt;code&gt;
&lt;pre&gt;
class UserProfile &lt; ActiveRecord::Base
  belongs_to :user
 
  attr_accessible :username
  validates_uniqueness_of :username
end
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;This bug took around 2 hours to fix, I guess not all errors in rails are as descriptive and easy to follow as they should. But at the end of it all, it&#39;s my fault for not paying attention.&lt;/p&gt;</description>
				<pubDate>Fri, 18 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/01/18/rails-quickhint-1.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/01/18/rails-quickhint-1.html</guid>
			</item>
		
			<item>
				<title>Hiding elements when they lose focus with jQuery</title>
				<description>&lt;p&gt;There&#39;s simply is no standard way of hiding an element when it loses it&#39;s &#39;focus&#39; using Javascript or jQuery. Here&#39;s how I&#39;ve been  doing it lately:&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
$(&quot;.userMenu a&quot;).on(&quot;click&quot;, function() {
  $(&quot;.loginForm&quot;).stop().fadeToggle(100, &quot;linear&quot;, function() {
    $(&quot;body&quot;).on(&quot;click.loginform&quot;, function(e) {
      if($(e.target).parents(&#39;.loginForm, .userMenu&#39;).length === 0) {
        $(&#39;.loginForm&#39;).fadeToggle(100);
        $(&quot;body&quot;).off(&quot;.loginform&quot;);
      }
    });
  });
});
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;As you can see, it&#39;s fairly straight forward. Basically, when you click the button that shows the element, it toggle&#39;s the target element&#39;s visibility. When it is visible, an event is bound to the body, so whenever it is clicked, it checks if the click was on the element or if it wasn&#39;t. If it wasn&#39;t on the element, we hide the element and remove the event from the body. If it was on the element, nothing happens.&lt;/p&gt;

&lt;p&gt;So far, I like this method a lot, mostly because it is simple and gets things done quickly.&lt;/p&gt;</description>
				<pubDate>Thu, 10 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/01/10/onBlur-for-divs-with-jquery.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/01/10/onBlur-for-divs-with-jquery.html</guid>
			</item>
		
	</channel>
</rss>
