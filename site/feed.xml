<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Seichy's Missing Bit</title>
		<description>A blog on programing, dreams, pandas and sweet food.</description>
		<link>http://martianwabbit.com</link>
		<atom:link href="http://martianwabbit.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Scroll Spying for Fun and Profit</title>
				<description>&lt;p&gt;I recently redesigned by blog. One of the new features is a menu that highlights the current post you are on. &lt;img class=&#39;small&#39; src=&#39;http://f.cl.ly/items/133x0c1u0K0g0Y3g0g1W/scrollspying.gif&#39; /&gt;&lt;/p&gt;

&lt;p&gt;To achieve this, I used &lt;a href=&quot;http://zeptojs.com/&quot;&gt;Zepto&lt;/a&gt; and a small amount of math. (The great thing about Zepto is that it’s fully compatible with jQuery, so this should work with jQuery out of the both as well).&lt;/p&gt;

&lt;p&gt;Let’s jump right in, here’s how I do it:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var article_offsets = $(&#39;article&#39;).map(function() { 
	return $(this).offset().top
});

$(window).on(&#39;scroll&#39;, function() {
	for (var i = 0; i &amp;lt; article_offsets.length; i++) {
		if (article_offsets[i] &amp;gt; scrollTop &amp;amp;&amp;amp; 
		article_offsets[i] &amp;lt; scrollTop + $(window).height()) 
		{
			$(&#39;.sidebar li&#39;)
				.removeClass(&#39;active&#39;)
				.eq(i).addClass(&#39;active&#39;);
		}
	};
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var article_offsets = $(&amp;#39;article&amp;#39;).map(function() { 
	return $(this).offset().top 
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grabs all of the vertical positions (from now on, offsets) of the elements I want to match and makes an array out of them. In this case, I am targeting the articles since, those represent my blog posts.&lt;/p&gt;

&lt;p&gt;After that, I am binding an event to the window’s scroll. Whenever the page is scrolled, we iterate over all of our scroll positions, if we find ourselves scrolled after one of the offsets and before the window height, we call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;#39;.sidebar li&amp;#39;).removeClass(&amp;#39;active&amp;#39;).eq(i).addClass(&amp;#39;active&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which looks for the Ith element on the sidebar’s list (which should match out Ith article element) and we add a class of ‘active’ to it, highlighting it and doing whatever we want with it.&lt;/p&gt;

&lt;p&gt;There’s a couple of other (bigger, more complex and probably more robust) solutions to this problem out there. Here’s a couple I came through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/javascript/#scrollspy&quot;&gt;http://getbootstrap.com/javascript/#scrollspy&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.outyear.co.uk/smint/&quot;&gt;http://www.outyear.co.uk/smint/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://scrollnav.com/&quot;&gt;http://scrollnav.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am pretty sure they are plenty of others, for my evil purposes, my tiny script fulfills my needs.&lt;/p&gt;</description>
				<pubDate>Fri, 04 Apr 2014 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2014/04/04/scroll-spying-for-fun-and-profit.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2014/04/04/scroll-spying-for-fun-and-profit.html</guid>
			</item>
		
			<item>
				<title>2014</title>
				<description>&lt;p&gt;I know I am a little late doing the whole goal setting and year review thing but, this year I wanted to try something different. I wanted to see how January turned out before setting goals.&lt;/p&gt;

&lt;p&gt;This year will be pretty exciting. I’ll continue working as a consultant as I have for the past couple of years. Invivo Link is doing some pretty cool things and I am happy to help them continue building their product. Over at &lt;a href=&quot;http://www.2build.it&quot;&gt;2build.it&lt;/a&gt;, we’re working with some pretty cool clients, building a variety of pretty cool things, hopefully the company will grow a whole lot this year.&lt;/p&gt;

&lt;p&gt;I tend to decide what I’d like to learn more during the year. This year’s language is going to be Rust. I’ve fallen in love with it on the past couple of months and I’d like to start building more things with it as the language becomes more stable. Apart from Rust, this year I’ll be working with Objective-C a whole lot more. I don’t fully like the language yet but, I feel like it can be a valuable tool in my toolset. I’ll also continue working on bundle.js as it has become essential to a client’s project which, turns out to be a great way to further develop it.&lt;/p&gt;

&lt;p&gt;I’d also like to write more, I didn’t get to do it as much as I wanted to last year so I’ve adjusted my goal, I want to write at least, 12 posts during the year. I think this is a reasonable quantity and I hope I’ll be able to reach it. I’d also like to read more, my goal for that is at least 52 books. I am up to speed so far so I am pretty sure I can reach that.&lt;/p&gt;

&lt;p&gt;Finally, I’d like a travel more this year, I am getting a little tired and burned out and I feel that it would help me to travel and see things.&lt;/p&gt;

&lt;p&gt;I achieved most of the important goals from last year so, I am looking forward to a great year.&lt;/p&gt;</description>
				<pubDate>Sun, 26 Jan 2014 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2014/01/26/2014.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2014/01/26/2014.html</guid>
			</item>
		
			<item>
				<title>You've Gotta Love Deferreds</title>
				<description>&lt;p&gt;Deferreds are awesome. They are such a simple solution to a really hard problem. Keeping things async in javascript can get hard sometimes. I recently wrote some code that looked like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code data-language=&#39;html&#39;&gt;
var settings = {
	template: &#39;todo.hbs&#39;,
	data_src: &#39;/todo.json&#39;
};
	
var template;
	
var getting_template;
var getting_data;
	
if (&#39;template&#39; in settings) {
	getting_template = $.get(settings.template);
	
	getting_template.done(function(t) {
		template = t;
	});
	
	if (&#39;data_src&#39; in settings) {
		getting_data = $.get(settings.data_src);
		getting_data.done(function(data) {
			render(template, data);
		});
	} else {
		getting_template.done(function(t) {
			render(t, {});
		});
	}
} else {
	render(&#39;&#39;, {});
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(I am pretty sure it wasn’t necessarily as ugly but, I don’t quite remember.)&lt;/p&gt;

&lt;p&gt;As you can see, even though I am making use of the deferreds returned by the &lt;code&gt;$.get&lt;/code&gt; function. This could be cleaned up a lot by using even more deferreds.&lt;/p&gt;

&lt;p&gt;Here’s more or less what the code ended up looking like:&lt;/p&gt;
&lt;pre&gt;
&lt;code data-language=&#39;html&#39;&gt;
var settings = {
	template: &#39;todo.hbs&#39;,
	data_src: &#39;/todo.json&#39;
};

var templateDefer = new $.Deferred();
var dataDefer; = new $.Deferred();

if (&#39;template&#39; in settings) {
	$.get(settings.template, function(template) {
		templateDefer.resolve(template);
	});
} else {
	templateDefer.resolve(&#39;&#39;);
}

if (&#39;data_src&#39; in settings) {
	$.get(settings.data_src, function(data) {
		dataDefer.resolve(data);
	});
} else {
	dataDefer.resolve({});
}

$.when(templateDefer, dataDefer).done(function(template, data) {
	render(template, data);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I basically kept everything async using stand-alone deferreds. Turns out jQuery has really handy deferred util built-in, all you have to do is create a new one (&lt;code&gt;new $.Deferred()&lt;/code&gt;). The other handy thing built into jQuery is the &lt;code&gt;$.when&lt;/code&gt; method, you can basically pass in a bunch of deferreds and you’d get a single one that responds when all of them respond in a particular way. That way, you can basically say, when they are all done, do this.&lt;/p&gt;

&lt;p&gt;I shall try experimenting a lot more with these tools, they are pretty easy to use and pack in, so much functionality.&lt;/p&gt;

&lt;h2 id=&quot;recommended_links&quot;&gt;Recommended links&lt;/h2&gt;

&lt;p&gt;Here’s a couple of recommended links, in case you want to learn more about deffereds, in particular, those built into jQuery:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;jQuery’s Deferred Object Documentation&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://vvv.tobiassjosten.net/javascript/jquery-deferreds-promises-asynchronous-bliss/&quot;&gt;jQuery Deferreds promises asynchronous bliss&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promises A+ Spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<pubDate>Tue, 12 Nov 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/11/12/youve-gotta-love-deferreds.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/11/12/youve-gotta-love-deferreds.html</guid>
			</item>
		
			<item>
				<title>A Semantic Grid with Zurb's Foundation</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://foundation.zurb.com&quot;&gt;Foundation&lt;/a&gt; is great. I love it, I use it whenever I am building anything big. My favorite feature and the one key thing that has kept me as a fan for so long has been it&#39;s grid. I feel like it&#39;s the best grid we have available so far.&lt;/p&gt;

&lt;p&gt;
    My favorite thing about that grid you ask? Apart from just being plainly awesome? Well, it&#39;s the semantic option. I know you probably haven&#39;t put much thought into it but, don&#39;t you feel like grid classes tend to clutter the html? I do, and I hate it. Enter the mixins!
&lt;/p&gt;

&lt;h2&gt;The Mixins&lt;/h2&gt;
&lt;p&gt;
    To alleviate this issue, Foundation gives us a set of really handy mixins which allow you to build a really semantic grid. It&#39;s as flexible as it can be and just as easy to use (I&#39;d argue that if you&#39;re familiar with sass, it&#39;s just plainly easier and requires less typing).
&lt;/p&gt;

&lt;p&gt;To demonstrate, I&#39;ll be showing you how to build this:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;http://f.cl.ly/items/08411t3C1f393p3W2B0G/Screen%20Shot%202013-10-11%20at%2012.45.18%20PM.png&quot; alt=&quot;Demo&quot;&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, it&#39;s a very simple layout. It&#39;d be really easy to build it using the grid classes, it&#39;s even easier to build it using the mixins. Here&#39;s my markup:&lt;/p&gt;
&lt;pre&gt;
&lt;code data-language=&quot;html&quot;&gt;&amp;lt;article&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
  
  &amp;lt;div&amp;gt;
      &amp;lt;img src=&amp;quot;http://lorempixel.com/300/400/&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;p&amp;gt;
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Exercitationem, voluptatibus, deserunt, facilis iusto sapiente impedit praesentium laudantium minus voluptas numquam incidunt corrupti sequi laboriosam magnam officia perspiciatis quas quam quaerat!
  &amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;As you can see it&#39;s pretty standard except the elements lack classes and such. Much prettier than usual in my opinion.&lt;/p&gt;

&lt;p&gt;Here&#39;s my CSS:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language=&quot;css&quot;&gt;@import &quot;foundation/components/global&quot;;
@import &quot;foundation/components/grid&quot;;

$total-columns: 5;
article {
  @include grid-row;

  header {
    @include grid-row;

    h1 {
      @include grid-column(5);  
    }
  }

  div {
    @include grid-column(2);
  }

  p {
    @include grid-column(3);
  }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Awesome, right? Here I am the grid-column and grid-row mixins to create the grid directly in my CSS. All you have to do is import the mixins. There are also many options to customize the grid, in this case I changed the number of columns from the default 12, to 5. I am also nesting rows, all from the CSS, leaving the HTML to describe it&#39;s thing. &lt;/p&gt;

&lt;h3&gt;Side note:&lt;/h3&gt;
&lt;p&gt;I hadn&#39;t notice that in this case you&#39;re putting a row directly inside another row, this isn&#39;t ideal as it can cause alignment issues. Ideally you&#39;d have the header inside full width column to prevent this. I don&#39;t think it matters in this example but in anything more complex it might be a pain to debug.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/smiley&quot;&gt;@smiley&lt;/a&gt; for the heads up!&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I feel like this technique is a great way to simplify the HTML and further decouple it from it&#39;s CSS. They&#39;ve been several similar things before such as the &lt;a href=&quot;http://semantic.gs/&quot;&gt;Semantic Grid&lt;/a&gt; which experimented with this idea. Foundation has a much more powerful grid so, it being able to work this way as well makes me really happy.&lt;/p&gt;</description>
				<pubDate>Fri, 11 Oct 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/10/11/a-semantic-grid-with-foundation.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/10/11/a-semantic-grid-with-foundation.html</guid>
			</item>
		
			<item>
				<title>Connecting To A Remote RethinkDB Admin Interface</title>
				<description>&lt;p&gt;
	So here&#39;s a really quick tip, when you run a RethinkDB instance on a remote server you cannot access the admin interface, by default, from the outside of the server. The easiest way to get around this without allowing anyone to access it is to use a ssh tunnel like this:
&lt;/p&gt;

&lt;pre&gt;
	&lt;code data-language=&quot;shell&quot;&gt;
$ ssh -L 8080:localhost:8080 &amp;lt;host&amp;gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
	This basically uses ssh to map the port 8080 of your machine (127.0.0.1 or localhost) to the port 8080 on the host machine. Don&#39;t forget to replace &quot;&amp;lt;host&amp;gt;&quot; with your actual remote host.
&lt;/p&gt;

&lt;p&gt;
	With this, you can now connect to the admin interface by going to localhost:8080 on your machine. Note that this will only work as long as the ssh connection remains open.
&lt;/p&gt;

&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;p&gt;
	&lt;a href=&quot;http://www.symantec.com/connect/articles/ssh-port-forwarding&quot;&gt;SSH Port Forwarding - Symatec&lt;/a&gt; &lt;br&gt;
	&lt;a href=&quot;https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding&quot;&gt;SSH/OpenSSH/PortForwarding - Ubuntu Community Documentation&lt;/a&gt;
&lt;/p&gt;</description>
				<pubDate>Sat, 20 Jul 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/07/20/connecting-to-a-remote-rethinkdb-admin-interface.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/07/20/connecting-to-a-remote-rethinkdb-admin-interface.html</guid>
			</item>
		
			<item>
				<title>A Javascript Array of Countries</title>
				<description>&lt;p&gt;Here’s the Array:&lt;/p&gt;
&lt;pre&gt;
&lt;code data-language=&#39;javascript&#39;&gt;
var countries = [&quot;Afghanistan&quot;, &quot;Åland Islands&quot;, &quot;Albania&quot;, &quot;Algeria&quot;, &quot;American Samoa&quot;, &quot;Andorra&quot;, &quot;Angola&quot;, &quot;Anguilla&quot;, &quot;Antarctica&quot;, &quot;Antigua And Barbuda&quot;, &quot;Argentina&quot;, &quot;Armenia&quot;, &quot;Aruba&quot;, &quot;Australia&quot;, &quot;Austria&quot;, &quot;Azerbaijan&quot;, &quot;Bahamas&quot;, &quot;Bahrain&quot;, &quot;Bangladesh&quot;, &quot;Barbados&quot;, &quot;Belarus&quot;, &quot;Belgium&quot;, &quot;Belize&quot;, &quot;Benin&quot;, &quot;Bermuda&quot;, &quot;Bhutan&quot;, &quot;Bolivia, Plurinational State Of&quot;, &quot;Bonaire, Sint Eustatius And Saba&quot;, &quot;Bosnia And Herzegovina&quot;, &quot;Botswana&quot;, &quot;Bouvet Island&quot;, &quot;Brazil&quot;, &quot;British Indian Ocean Territory&quot;, &quot;Brunei Darussalam&quot;, &quot;Bulgaria&quot;, &quot;Burkina Faso&quot;, &quot;Burundi&quot;, &quot;Cambodia&quot;, &quot;Cameroon&quot;, &quot;Canada&quot;, &quot;Cape Verde&quot;, &quot;Cayman Islands&quot;, &quot;Central African Republic&quot;, &quot;Chad&quot;, &quot;Chile&quot;, &quot;China&quot;, &quot;Christmas Island&quot;, &quot;Cocos (keeling) Islands&quot;, &quot;Colombia&quot;, &quot;Comoros&quot;, &quot;Congo&quot;, &quot;Congo, The Democratic Republic Of The&quot;, &quot;Cook Islands&quot;, &quot;Costa Rica&quot;, &quot;Côte D&#39;ivoire&quot;, &quot;Croatia&quot;, &quot;Cuba&quot;, &quot;Curaçao&quot;, &quot;Cyprus&quot;, &quot;Czech Republic&quot;, &quot;Denmark&quot;, &quot;Djibouti&quot;, &quot;Dominica&quot;, &quot;Dominican Republic&quot;, &quot;Ecuador&quot;, &quot;Egypt&quot;, &quot;El Salvador&quot;, &quot;Equatorial Guinea&quot;, &quot;Eritrea&quot;, &quot;Estonia&quot;, &quot;Ethiopia&quot;, &quot;Falkland Islands (malvinas)&quot;, &quot;Faroe Islands&quot;, &quot;Fiji&quot;, &quot;Finland&quot;, &quot;France&quot;, &quot;French Guiana&quot;, &quot;French Polynesia&quot;, &quot;French Southern Territories&quot;, &quot;Gabon&quot;, &quot;Gambia&quot;, &quot;Georgia&quot;, &quot;Germany&quot;, &quot;Ghana&quot;, &quot;Gibraltar&quot;, &quot;Greece&quot;, &quot;Greenland&quot;, &quot;Grenada&quot;, &quot;Guadeloupe&quot;, &quot;Guam&quot;, &quot;Guatemala&quot;, &quot;Guernsey&quot;, &quot;Guinea&quot;, &quot;Guinea-bissau&quot;, &quot;Guyana&quot;, &quot;Haiti&quot;, &quot;Heard Island And Mcdonald Islands&quot;, &quot;Holy See (vatican City State)&quot;, &quot;Honduras&quot;, &quot;Hong Kong&quot;, &quot;Hungary&quot;, &quot;Iceland&quot;, &quot;India&quot;, &quot;Indonesia&quot;, &quot;Iran, Islamic Republic Of&quot;, &quot;Iraq&quot;, &quot;Ireland&quot;, &quot;Isle Of Man&quot;, &quot;Israel&quot;, &quot;Italy&quot;, &quot;Jamaica&quot;, &quot;Japan&quot;, &quot;Jersey&quot;, &quot;Jordan&quot;, &quot;Kazakhstan&quot;, &quot;Kenya&quot;, &quot;Kiribati&quot;, &quot;Korea, Democratic People&#39;s Republic Of&quot;, &quot;Korea, Republic Of&quot;, &quot;Kuwait&quot;, &quot;Kyrgyzstan&quot;, &quot;Lao People&#39;s Democratic Republic&quot;, &quot;Latvia&quot;, &quot;Lebanon&quot;, &quot;Lesotho&quot;, &quot;Liberia&quot;, &quot;Libya&quot;, &quot;Liechtenstein&quot;, &quot;Lithuania&quot;, &quot;Luxembourg&quot;, &quot;Macao&quot;, &quot;Macedonia, The Former Yugoslav Republic Of&quot;, &quot;Madagascar&quot;, &quot;Malawi&quot;, &quot;Malaysia&quot;, &quot;Maldives&quot;, &quot;Mali&quot;, &quot;Malta&quot;, &quot;Marshall Islands&quot;, &quot;Martinique&quot;, &quot;Mauritania&quot;, &quot;Mauritius&quot;, &quot;Mayotte&quot;, &quot;Mexico&quot;, &quot;Micronesia, Federated States Of&quot;, &quot;Moldova, Republic Of&quot;, &quot;Monaco&quot;, &quot;Mongolia&quot;, &quot;Montenegro&quot;, &quot;Montserrat&quot;, &quot;Morocco&quot;, &quot;Mozambique&quot;, &quot;Myanmar&quot;, &quot;Namibia&quot;, &quot;Nauru&quot;, &quot;Nepal&quot;, &quot;Netherlands&quot;, &quot;New Caledonia&quot;, &quot;New Zealand&quot;, &quot;Nicaragua&quot;, &quot;Niger&quot;, &quot;Nigeria&quot;, &quot;Niue&quot;, &quot;Norfolk Island&quot;, &quot;Northern Mariana Islands&quot;, &quot;Norway&quot;, &quot;Oman&quot;, &quot;Pakistan&quot;, &quot;Palau&quot;, &quot;Palestine, State Of&quot;, &quot;Panama&quot;, &quot;Papua New Guinea&quot;, &quot;Paraguay&quot;, &quot;Peru&quot;, &quot;Philippines&quot;, &quot;Pitcairn&quot;, &quot;Poland&quot;, &quot;Portugal&quot;, &quot;Puerto Rico&quot;, &quot;Qatar&quot;, &quot;Réunion&quot;, &quot;Romania&quot;, &quot;Russian Federation&quot;, &quot;Rwanda&quot;, &quot;Saint Barthélemy&quot;, &quot;Saint Helena, Ascension And Tristan Da Cunha&quot;, &quot;Saint Kitts And Nevis&quot;, &quot;Saint Lucia&quot;, &quot;Saint Martin (french Part)&quot;, &quot;Saint Pierre And Miquelon&quot;, &quot;Saint Vincent And The Grenadines&quot;, &quot;Samoa&quot;, &quot;San Marino&quot;, &quot;Sao Tome And Principe&quot;, &quot;Saudi Arabia&quot;, &quot;Senegal&quot;, &quot;Serbia&quot;, &quot;Seychelles&quot;, &quot;Sierra Leone&quot;, &quot;Singapore&quot;, &quot;Sint Maarten (dutch Part)&quot;, &quot;Slovakia&quot;, &quot;Slovenia&quot;, &quot;Solomon Islands&quot;, &quot;Somalia&quot;, &quot;South Africa&quot;, &quot;South Georgia And The South Sandwich Islands&quot;, &quot;South Sudan&quot;, &quot;Spain&quot;, &quot;Sri Lanka&quot;, &quot;Sudan&quot;, &quot;Suriname&quot;, &quot;Svalbard And Jan Mayen&quot;, &quot;Swaziland&quot;, &quot;Sweden&quot;, &quot;Switzerland&quot;, &quot;Syrian Arab Republic&quot;, &quot;Taiwan, Province Of China&quot;, &quot;Tajikistan&quot;, &quot;Tanzania, United Republic Of&quot;, &quot;Thailand&quot;, &quot;Timor-leste&quot;, &quot;Togo&quot;, &quot;Tokelau&quot;, &quot;Tonga&quot;, &quot;Trinidad And Tobago&quot;, &quot;Tunisia&quot;, &quot;Turkey&quot;, &quot;Turkmenistan&quot;, &quot;Turks And Caicos Islands&quot;, &quot;Tuvalu&quot;, &quot;Uganda&quot;, &quot;Ukraine&quot;, &quot;United Arab Emirates&quot;, &quot;United Kingdom&quot;, &quot;United States&quot;, &quot;United States Minor Outlying Islands&quot;, &quot;Uruguay&quot;, &quot;Uzbekistan&quot;, &quot;Vanuatu&quot;, &quot;Venezuela, Bolivarian Republic Of&quot;, &quot;Viet Nam&quot;, &quot;Virgin Islands, British&quot;, &quot;Virgin Islands, U.s.&quot;, &quot;Wallis And Futuna&quot;, &quot;Western Sahara&quot;, &quot;Yemen&quot;, &quot;Zambia&quot;, &quot;Zimbabwe&quot;];
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It follows the ISO 3166-1-alpha-2 standard. You don’t need an array with countries everyday but, when you do, getting it is a pain. I am putting it here so my future self doesn’t have to look for it again.&lt;/p&gt;

&lt;p&gt;Here’s how I got the list:&lt;/p&gt;
&lt;pre&gt;
&lt;code data-language=&#39;javascript&#39;&gt;
$ = jQuery;
String.prototype.capitalize = function() {
    return this.replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); });
};

var countries = &quot;var countries = [&quot;;

$(&#39;tbody&#39;).find(&quot;tr&quot;).each(function(i) {
    var country = $(this).find(&#39;td&#39;).last().text();
    country = country.toLowerCase().capitalize();
    if (i === 0) {
        countries = countries + &quot;\&quot;&quot; + country + &quot;\&quot;&quot;;
    } else {
        countries = countries + &quot;, &quot; + &quot;\&quot;&quot; + country + &quot;\&quot;&quot;;
    }
});

countries = countries + &quot;];&quot;;
console.log(countries);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you run that script in &lt;a href=&quot;http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm&quot;&gt;here&lt;/a&gt;, you’ll get a nice string printed on the console which you can copy and paste and use as an array. Quick 5-minute hack FTW.&lt;/p&gt;</description>
				<pubDate>Fri, 28 Jun 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/06/28/a-javascript-array-of-countries.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/06/28/a-javascript-array-of-countries.html</guid>
			</item>
		
			<item>
				<title>On Storytelling and Video Games</title>
				<description>&lt;p&gt;I think we live in a very exciting time. We have so many incredible things to communicate and so many mediums to do so. I’ve always been a daydreamer. I remember my third grade teacher using me in an example when he introduced the word. It always stuck with me, I am pretty introverted sometimes and, allowing myself to live in a different superposed world has always kept me sane.&lt;/p&gt;

&lt;p&gt;All these years I’ve been developing a world in my head, all the fine details, all the characters that inhabit such a world and every single one of their motivations and dreams have been slowly built and polish as my life goes on. I’ve thought of writing a book for years. Not because I want to be a writer, I’ll always be a programmer, but because I want to capture this world. I don’t want to lose it and I want others who know me and have heard all my stories to understand how deep this rabbit hole is.&lt;/p&gt;

&lt;p&gt;The problem is, I am not a writer (and as I said before, I don’t want to be one) so, writing a book is pretty daunting. Luckily there are many other mediums available to me, even though I love all sort of media, my favorite one, and the one that incorporates every other media I like is video games. I’ve always wanted to become an indie game developer. So far I haven’t been successful mostly because I let other parts of my life get in the way. I plan to change that though.&lt;/p&gt;

&lt;p&gt;I want to use video games as a canvas on which I tell my stories. I think it’s probably the only way for them to be as immersing for everyone as they’ve been for me. From now on, I’ll start working on games that tell all of my daydreams. I’ve already started on the first one, the genre will be a huge mash-up of elements I like and will hopefully get my message through. Video games are truly the means to greater expression right now and I want to fully embrace that.&lt;/p&gt;</description>
				<pubDate>Tue, 05 Mar 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/03/05/On-Storytelling-and-games.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/03/05/On-Storytelling-and-games.html</guid>
			</item>
		
			<item>
				<title>Migrating from Tumblr to Jekyll</title>
				<description>&lt;p&gt;A couple of months ago I moved my blog from Tumblr over to Jekyll and started hosting it with Webfaction. It’s been great so far but, I never quite figured out how to get rid of my old url redirecting everything to it’s new page on the new blog.&lt;/p&gt;

&lt;p&gt;I originally thought I’d have to write a redirect rule for each of the posts I kept on the new blog and then make the subdomain redirect to to the domain. Needless to say that it felt so annoying that I ended up not doing anything at all. Until now, that is. So here is how I fixed stuff! First of all, since I imported my Tumblr posts using the importer that comes with Jekyll, I had urls that looked like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
	http://martianwabbit.com/2011/04/04/4344642365.html
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I didn’t really change them, I thought that they having their old ID would be handy when I wanted to make the shift completely. This ended up being a good decision at the end.&lt;/p&gt;

&lt;p&gt;So now, the only thing I needed to do was to redirect this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
http://blog.martianwabbit.com/post/4344642365/justvector-social-icons-font
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
http://martianwabbit.com/2011/04/04/4344642365.html
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which isn’t as straight-forward since, I have no way of knowing what the date might be, so I changed the permalink for imported posts to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&lt;pre&gt;
— &lt;br /&gt;
layout: post &lt;br /&gt;
title: &amp;quot;JustVector Social Icons Font&amp;quot; &lt;br /&gt;
permalink: /post/4344642365.html &lt;br /&gt;
—
&lt;/pre&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So I could just do a simple URL redirect. Now, all I needed to do was setup apache so it’d redirect the URLs as intended, that was probably the easiest part, a quick regex later I ended up with this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&lt;pre&gt;
RedirectMatch \/post\/([0-9]+)\/.* /post/$1.html
&lt;/pre&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which worked exactly as intended, now all I have to do, is wait for the DNS to finish propagating.&lt;/p&gt;</description>
				<pubDate>Sun, 24 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/24/migrating-from-tumblr-to-jekyll.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/24/migrating-from-tumblr-to-jekyll.html</guid>
			</item>
		
			<item>
				<title>Design For Your Mother</title>
				<description>&lt;p&gt;I am not really that much of a designer. I’ve worked as one but, I’d never describe me as a “web designer”. I am simply not that good with designing things. I do have good taste though and, can tell good design apart from bad design. I also have a solid knowledge of design and UX in general which is enough for my day to day activities. At the end of the day, the only thing I know about design, is that good design should be easy to use. How easy? Well, my mother should be able to use it without having to ask for my help. I obviously know that not all mothers need help when it comes to computers (to be honest, mine can handle herself just fine without me) but, the point is, your design should be easy to use first, and nice-looking second. My mother should be able to use your application without having to think too hard. Users are lazy and they like being able to do stuff without thinking. Try as hard as possible to make it easy for them to not think.&lt;/p&gt;

&lt;p&gt;I really like how simple interfaces are kind of trending these days. It really is great, simple design helps get the message through and allows users to interact more freely with the web. I’ve always gone with “minimalist” designs mostly because, it’s easier to get right when you are not that great of a designer and also because it’s easier for the user to interact with any application if they are only presented what they need at any given moment.&lt;/p&gt;

&lt;p&gt;Are you sure you need that extra button? Would anyone apart from power users benefit from having this on the interface? Will this get the message through? Can we hide all of this complexity so they can find it if they need it but wont get in the way if they don’t?&lt;/p&gt;

&lt;p&gt;Think about, simple design is awesome, &lt;a href=&quot;http://www.sensible.com/dmmt.html&quot;&gt;don’t make me think&lt;/a&gt; and don’t make my mother ask me for help.&lt;/p&gt;</description>
				<pubDate>Wed, 20 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/20/Design-for-your-mother.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/20/Design-for-your-mother.html</guid>
			</item>
		
			<item>
				<title>On the Importance of Vanilla Javascript</title>
				<description>&lt;p&gt;There’s a very simple reason why people don’t see the need to learn “vanilla” Javascript. Boilerplate code. When you are trying to create something simple and straight-forward Javascript loves getting in the way. Well, Javascript doesn’t actually like getting in the way, browsers do. This gets worse when you are trying to support different browser versions. So you have to write things using the current APIs available to you and then, add a whole abstraction layer just so you can fall-back to a workable solution that might be needed to support a particular browser version which happens to be pretty old but a bunch of your users still use.&lt;/p&gt;

&lt;p&gt;So, there’s two ways to look at this, either you go with the approach that will support the most users and let the other’s suffer (or degrade gracefully, ideally). Or write a bunch of boilerplate code to support browsers. Luckily, the second option is actually viable. There’s a plethora of libraries other people have taken the time to write for you. These are great. They are well tested, cross-browser and are really easy to use.&lt;/p&gt;

&lt;p&gt;The problem is that sometimes you have to add 9595 lines of codes just to do something as simple as &lt;code&gt;$(&amp;quot;code&amp;quot;).addClass(&amp;quot;prettyPrint&amp;quot;); &lt;/code&gt;. This is were a bunch of people will appear out of nowhere and tell you to do it manually with “vanilla” Javascript. I am not against vanilla Javascript. I actually like writing stuff in Javascript without the aid of libraries but, this is mostly unreasonable. For example, adding the class takes jQuery 38 lines. Now, you might say something along the lines that jQuery is an extreme example but, I am sure that everything that can be taken out was already taken out. So, you might just go with jQuery and call it the day, after all going the vanilla way is only feasible when you know your audience and want to tailor directly to them or when you are strict on who you support and are pro graceful degradation. Of course, if you have a time constraint it becomes even more one sided.&lt;/p&gt;

&lt;p&gt;I personally think that soon enough, we won’t need jQuery to do as much for us, with new browser APIs it gets increasingly easier to get things done with less. Things like querySelectors and CSS3 animations can go a long way when building a modern site. But, as long as we have money to be made and time to be saved and many browsers to be supported, going vanilla might not be a good option in most cases.&lt;/p&gt;</description>
				<pubDate>Wed, 13 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://martianwabbit.com/2013/02/13/On-the-Importance-of-Vanilla-Javascript.html</link>
				<guid isPermaLink="true">http://martianwabbit.com/2013/02/13/On-the-Importance-of-Vanilla-Javascript.html</guid>
			</item>
		
	</channel>
</rss>
